// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ChainalysisProxy.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ChainalysisProxyAPI.
    /// </summary>
    public static partial class ChainalysisProxyAPIExtensions
    {
            /// <summary>
            /// Resigter user for track
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            public static IUserScoreDetails UserByUserIdRegisterPost(this IChainalysisProxyAPI operations, string userId)
            {
                return operations.UserByUserIdRegisterPostAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resigter user for track
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IUserScoreDetails> UserByUserIdRegisterPostAsync(this IChainalysisProxyAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserByUserIdRegisterPostWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Information about user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            public static IUserScoreDetails UserByUserIdGetGet(this IChainalysisProxyAPI operations, string userId)
            {
                return operations.UserByUserIdGetGetAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Information about user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IUserScoreDetails> UserByUserIdGetGetAsync(this IChainalysisProxyAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserByUserIdGetGetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='transaction'>
            /// Transaction to be added
            /// </param>
            public static object UserByUserIdAddtransactionPost(this IChainalysisProxyAPI operations, string userId, NewTransactionModel transaction = default(NewTransactionModel))
            {
                return operations.UserByUserIdAddtransactionPostAsync(userId, transaction).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='transaction'>
            /// Transaction to be added
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UserByUserIdAddtransactionPostAsync(this IChainalysisProxyAPI operations, string userId, NewTransactionModel transaction = default(NewTransactionModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserByUserIdAddtransactionPostWithHttpMessagesAsync(userId, transaction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='wallet'>
            /// Wallet to be added
            /// </param>
            public static object UserByUserIdAddwalletPost(this IChainalysisProxyAPI operations, string userId, NewWalletModel wallet = default(NewWalletModel))
            {
                return operations.UserByUserIdAddwalletPostAsync(userId, wallet).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Lykke user Id (won't be use for Chainalisys)
            /// </param>
            /// <param name='wallet'>
            /// Wallet to be added
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UserByUserIdAddwalletPostAsync(this IChainalysisProxyAPI operations, string userId, NewWalletModel wallet = default(NewWalletModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserByUserIdAddwalletPostWithHttpMessagesAsync(userId, wallet, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IChainalysisProxyAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IChainalysisProxyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
